
//String compression
public static void main(String[] args) {
        String str = "aabbbabbc";
        String output = compressString(str);
        System.out.println(output);
    }

    public static String compressString(String str) {
        if (str == null || str.isEmpty()) {
            return "";
        }

        StringBuilder compressed = new StringBuilder();
        int count = 1;

        for (int i = 1; i < str.length(); i++) {
            if (str.charAt(i) == str.charAt(i - 1)) {
                count++;
            } else {
                compressed.append(count).append(str.charAt(i - 1));
                count = 1;
            }
        }

        compressed.append(count).append(str.charAt(str.length() - 1)); // Append the last character count
        return compressed.toString();
    }

##################################################################

public static int mostFrequentElement(int arr[]){
        HashMap<Integer,Integer> freqMap = new HashMap<>();
        int ans = -1;
        int maxFreq = 0;
        for(int i=0;i<arr.length;i++){
            freqMap.put(arr[i],freqMap.getOrDefault(arr[i],0)+1);
            if(freqMap.get(arr[i])>maxFreq){
                maxFreq = freqMap.get(arr[i]);
                ans = arr[i];
            }
        }
        return ans;
    }

##################################################################
	
public static int mostFrequentElementRaw(int arr[]){
        HashMap<Integer,Integer> freqMap = new HashMap<>();
        int ans = -1;
        int maxFreq = 0;
        for(int i=0;i<arr.length;i++){
            if(freqMap.containsKey(arr[i])){
                int val = freqMap.get(arr[i]);
                val+=1;
                freqMap.put(arr[i],val);
            }else{
                freqMap.put(arr[i],1);
            }
            if(freqMap.get(arr[i])>maxFreq){
                maxFreq = freqMap.get(arr[i]);
                ans = arr[i];
            }
        }
        return ans;
    }
	
	
	
public String isSubset( long a1[], long a2[], long n, long m) {
        HashMap<Long,Integer> freqMap = new HashMap<>();
        for(long element : a1){
            freqMap.put(element, freqMap.getOrDefault(element,0)+1);
        }

        for(long element : a2){
            //  if(freqMap.containsKey(element) && freqMap.get(element)>0){
            if(freqMap.getOrDefault(element,0)>0){
                freqMap.put(element, freqMap.get(element)-1);
            }else {
                return "No";
            }
        }
        return "Yes";
    }
	
	

public String isSubsetOld( long a1[], long a2[], long n, long m) {
        HashMap<Long,Integer> freqMap = new HashMap<>();
        for(long element : a1){
            freqMap.put(element, freqMap.getOrDefault(element,0)+1);
        }

        for(long element : a2){
              if(freqMap.containsKey(element) && freqMap.get(element)>0){
                freqMap.put(element, freqMap.get(element)-1);
            }else {
                return "No";
            }
        }
        return "Yes";
    }
	
	


public class EmployeeNameIdComparator implements Comparator<Employee> {
    @Override
    public int compare(Employee emp1, Employee emp2) {
        int nameCompare = emp1.getEmpName().compareTo(emp2.getEmpName());
        if (nameCompare!= 0) {
            return nameCompare; // Sort by name if names are different
        } else {
            return Integer.compare(emp1.getEmpId(), emp2.getEmpId()); // Otherwise, sort by ID
        }
    }
}


public class Employee implements Comparable<Employee> {
    // ... (other fields, constructor, getters, etc.)

    @Override
    public int compareTo(Employee other) {
        int nameCompare = this.empName.compareTo(other.empName); // Compare names
        if (nameCompare != 0) {
            return nameCompare; // If names are different, sort by name
        } else {
            return Integer.compare(this.empId, other.empId); // Otherwise, sort by ID
        }
    }
}


//target sum
Map<Integer, Integer> numMap = new HashMap<>();
	for(int i=0; i<nums.length; i++){
		int complement = target - nums[i];
		if(numMap.containsKey(complement)){
			return new int[] {numMap.get(complement),i};
		}else{
			numMap.put(nums[i],i);
		}
	}
	// if no solution found
	return new int[] {};
		
############################################################

	
//program to push zero to front and ones to end in the list
public class PushZeroOne {
    public static void main(String[] args) {
        int[] arr = {1, 0, 1, 0, 1, 0, 1, 0};
        int left = 0, right = arr.length - 1;

        while (left < right) {
            while (left < right && arr[left] == 0) left++;
            while (left < right && arr[right] == 1) right--;

            if (left < right) {
                arr[left] = 0;
                arr[right] = 1;
                left++;
                right--;
            }
        }

        System.out.println("Rearranged Array: " + Arrays.toString(arr));
    }
}


#############################################################